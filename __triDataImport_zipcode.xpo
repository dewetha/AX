Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: triTextFileImport_ZipCode_US unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #triTextFileImport_ZipCode_US
    PROPERTIES
      Name                #triTextFileImport_ZipCode_US
      Extends             #triTextFileImport
      Origin              #{74E5C1CB-0749-4D57-8E4A-A9556D5E24D6}
    ENDPROPERTIES
    
    METHODS
      SOURCE #caption
        #public ClassDescription caption()
        #{
        #    ClassDescription ret;
        #
        #    ret = "Import US Zip Codes";
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class triTextFileImport_ZipCode_US extends triTextFileImport implements triTextFileImpInterface
        #{
        #    // file format
        #
        #    #define.ZipCode(1)
        #    #define.City(2)
        #    #define.State(3)
        #    #define.County(4)
        #    #define.AreaCode(5)
        #    #define.CityType(6)
        #    #define.CityAliasAbbreviation(7)
        #    #define.CityAliasName(8)
        #    #define.Latitude(9)
        #    #define.Longitude(10)
        #    #define.TimeZone(11)
        #    #define.Elevation(12)
        #    #define.CountyFIPS(13)
        #    #define.DayLightSavings(14)
        #
        #    #define.CountryRegionId('USA')
        #}
      ENDSOURCE
      SOURCE #dialog
        #protected Object dialog()
        #{
        #    Object ret;
        #
        #    ret = super();
        #
        #    ret.caption(this.caption());
        #    dlgErrorPath.visible(false);
        #    dlgBackupPath.visible(false);
        #    dlgBatchFiles.visible(false);
        #    dlgInboundPath.visible(false);
        #
        #/*
        #
        #    dialog.addTabPage("Import Info");
        #
        #
        #
        #    dialog.addGroup('File Locations Settings');
        #    dlgInboundPath  = dialog.addFieldValue(typeID(FilePath),inboundPath,'Inbound Folder','Location of file(s) to be Processed');
        #    dlgBackupPath   = dialog.addFieldValue(typeID(FilePath),backupPath,'Backup Folder','location where processed file(s) are moved to');
        #    dlgErrorPath    = dialog.addFieldValue(typeID(FilePath),errorPath,'Error Folder','Location to hold file generated from errors');
        #
        #
        #    dialog.addGroup('Settings');
        #    dlgBatchFiles   = dialog.addFieldValue(typeID(NoYesId),batchFiles,'Batch Files','Process all files in the inbound directory');
        #    dlgHasHeader    = dialog.addFieldValue(typeID(NoYesId),hasHeader,'File(s) have Header','Indicates a column definition row to be skipped.');
        #*/
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #findOrCreateCity
        #private LogisticsAddressCityRecId findOrCreateCity( LogisticsAddressCity    _city,
        #                                                    LogisticsAddressStateId _stateID,
        #                                                    LogisticsAddressCountyId _countyId)
        #{
        #    LogisticsAddressCity             city;
        #    LogisticsAddresssCity            cityRecord;
        #
        #
        #    city = _city;
        #
        #    // Check if the city exists
        #    // We match all the conditions to have an exact match
        #    select firstonly cityRecord where
        #        cityRecord.Name == city &&
        #        cityRecord.StateId == _stateId &&
        #        cityRecord.CountryRegionId == #countryRegionId &&
        #        cityRecord.CountyId == _countyId;
        #
        #    // If city does not exist create
        #    if (!cityRecord)
        #    {
        #        cityRecord.CountryRegionId = #countryRegionId;
        #        cityRecord.Name = city;
        #        cityRecord.StateId = _stateId;
        #        cityRecord.CountyId = _countyId;
        #        cityRecord.insert();
        #    }
        #
        #    return cityRecord.RecId;
        #}
      ENDSOURCE
      SOURCE #findOrCreateCounty
        #private LogisticsAddressCountyId findOrCreateCounty( LogisticsAddressCountyId _countyId,
        #                                                     LogisticsAddressStateId  _stateID)
        #{
        #    LogisticsAddressCountyId         countyId;
        #    LogisticsAddressCounty           county;
        #
        #    countyId = _countyId;
        #    // Check if county exists
        #    county = LogisticsAddressCounty::find(#countryRegionId, _stateId, countyId);
        #
        #    if (!county)
        #    {
        #        // County needs a state
        #        county.CountryRegionId  = #countryRegionId;
        #        county.StateId          = _stateID;
        #        county.CountyId         = countyId;
        #        county.Name             = countyId;
        #        county.insert();
        #    }
        #
        #
        #    return countyId;
        #}
      ENDSOURCE
      SOURCE #findOrCreateState
        #private LogisticsAddressStateId findOrCreateState(LogisticsAddressStateId _stateID)
        #{
        #    LogisticsAddressState       state;
        #    LogisticsAddressStateId     stateId;
        #
        #
        #
        #    stateId = strrem(_stateId, ' ');
        #
        #    if(strlen(stateId) != 2)
        #    {
        #        throw error(strFmt("Invalid State name lenght %1", _stateID));
        #    }
        #
        #    state= LogisticsAddressState::find(#countryRegionId, stateId);
        #
        #    if (!state)
        #    {
        #        state.CountryRegionId   = #countryRegionId;
        #        state.StateId           = stateId;
        #        state.insert();
        #    }
        #
        #    return stateId;
        #}
      ENDSOURCE
      SOURCE #findOrCreateZipCode
        #private boolean findOrCreateZipCode(   LogisticsAddressZipCodeId   _zipCodeId,
        #                                    LogisticsAddressCity        _city,
        #                                    LogisticsAddressStateId     _stateID,
        #                                    LogisticsAddressCountyId    _countyId,
        #                                    LogisticsAddressCityRecId   _cityRecID
        #                                    )
        #{
        #
        #    LogisticsAddressZipCodeId        zipCodeId;
        #    LogisticsAddressZipCode          zipCode;
        #
        #    zipCodeId = _zipCodeId;
        #
        #    select firstonly zipCode where
        #        zipCode.ZipCode == zipCodeId &&
        #        zipCode.State == _stateId &&
        #        zipCode.County == _countyId &&
        #        zipCode.CountryRegionId == #countryRegionId &&
        #        zipCode.CityRecId == _cityRecId;
        #
        #    if (!zipCode)
        #    {
        #        zipCode.ZipCode         = zipCodeId;
        #        zipCode.City            = _city;
        #        zipCode.CityRecId       = _cityRecId;
        #        zipCode.CountryRegionId = #countryRegionId;
        #        zipCode.State           = _stateId;
        #        zipCode.County          = _countyId;
        #        zipCode.insert();
        #
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #processData
        #public boolean processData(container inRecord)
        #{
        #    boolean ret;
        #
        #    LogisticsAddressZipCodeId           zipCodeId;
        #    LogisticsAddressCity                city;
        #    LogisticsAddressStateId             stateId;
        #    LogisticsAddressCountyId            countyId;
        #    LogisticsAddressCityRecId           cityRecID;
        #
        #
        #
        #    // assign values from file to varibles
        #    zipCodeId   =  conpeek(inRecord,#ZipCode);
        #    city        =  conpeek(inRecord,#City);
        #    stateId     =  conpeek(inRecord,#State);
        #    countyId    =  conpeek(inRecord,#County);
        #
        #    // Check if the inputs are valid
        #    if (!zipCodeId || !city || !stateId || !countyId)
        #    {
        #        throw error(strFmt("Missing zip or city or state or county"));
        #    }
        #
        #    stateId     = this.findOrCreateState(stateId);
        #    countyId    = this.findOrCreateCounty(countyId,stateId);
        #    cityRecID   = this.findOrCreateCity(city,stateId,countyId);
        #    ret         = this.findOrCreateZipCode(zipCodeId,city,stateId,countyId,cityRecID);
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FTM

; Microsoft Dynamics AX MENUITEM : triTextFileImport_ZipCode_US unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #triTextFileImport_ZipCode_US
    Type: 3
    PROPERTIES
      Name                #triTextFileImport_ZipCode_US
      Label               #Import US Zip Codes
      ObjectType          #Class
      Object              #triTextFileImport
      Parameters          #triTextFileImport_ZipCode_US
      Origin              #{5CD6C986-02F6-430C-B811-8F3474B418DA}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: PRN

; Microsoft Dynamics AX Project : _triDataImport_zipcode unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #_triDataImport_zipcode
  SHARED
  PROPERTIES
    Name                #_triDataImport_zipcode
    Origin              #{B9631770-D3D8-4806-8917-F0DD63C2D817}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1024403
      NODETYPE 329
      NAME #triTextFileImport_ZipCode_US
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 3
      UTILOBJECTID 0
      NODETYPE 296
      NAME #triTextFileImport_ZipCode_US
    ENDNODE
  ENDPROJECT
  

***Element: END
